<?php
namespace JasperFW\JasperFW\Event;

/**
 * Class EventHandler
 *
 * EventHandler defines a callback or other logic to be executed when a specific event is triggered by the framework
 * itself, or optionally can be triggered by any code within the framework. Custom events are triggered by calling
 * Jasper::i()->fireEvent();
 *
 * This class specifically wraps a callback, however subclasses can implement any custom logic desired.
 *
 * A callback consists of an object or class and a method to call on said object/method. Optionally, additional
 * arguments can be specified which will be passed through to the specified function.
 *
 * @package JasperFW\JasperFW\Event
 */
class EventHandler
{
    /** @var string The name of the event upon which this handler will be called */
    protected $event;
    /** @var mixed The name of the class or the object to call the method on */
    protected $object_or_class;
    /** @var string The name of the method to call */
    protected $method;
    /** @var array The arguments to pass to the function */
    protected $arguments;

    /**
     * @param string $event           The name of the event triggering this callback
     * @param mixed  $object_or_class The object or fully qualified classname
     * @param string $method          The method to call
     * @param array  $arguments       Options to pass to the method
     */
    public function __construct(string $event, $object_or_class, string $method, array $arguments = [])
    {
        $this->event = $event;
        $this->object_or_class = $object_or_class;
        $this->method = $method;
        $this->arguments = $arguments;
    }

    /**
     * Get the name of the event this listener is waiting for
     *
     * @return string The event this handler is waiting for
     */
    public function getEvent(): string
    {
        return $this->event;
    }

    /**
     * Execute the callback. Returns any value generated by the function.
     */
    public function execute(): void
    {
        call_user_func_array([$this->object_or_class, $this->method], $this->arguments);
    }
}